{"version":3,"sources":["common/consts.jsx","components/Box/index.jsx","pages/Main/index.jsx","assets/flip.wav","App.js","reportWebVitals.js","index.js"],"names":["prefix","Box","box_width","initial_x","props","className","text","others","classnames","draw_list","iniSpeed","boxs_count","resistance","loop_before_slow_down","low_resistance_speed","low_resistance","shift_x","randomBoxs","loop_count","speed","prevSelectedIndex","items_temp","defaultConfigs","resetData","Main","useSound","flipSfx","interrupt","playSound_flip","useState","isStart","setStart","selected","updateSelected","shiftX","updateShiftX","settingPanel","showSettingPanel","debugMode","setDebugMode","settingForm","updateSettingForm","itemsPanel","showItemsPanel","isEnd","setIsEnd","callback","undefined","playSound_flip_thrott","set_playSound_flip_thrott","centralLineRef","useRef","resetToDefaultConfigs","configs","useEffect","throttle","localStorage","getItem","JSON","parse","generateBoxs","err","console","log","useLayoutEffect","clearInterval","timer","count","draw_list_length","length","Array","fill","map","randIndex","Math","floor","random","saveConfigs","setItem","stringify","closePanel","message","success","renderBoxs","useMemo","item","index","isSelected","id","style","transform","renderInputForm","size","defaultValue","onChange","value","step","checked","renderItemsPanel","placeholder","type","onClick","i","push","e","target","slice","SettingOutlined","shape","info","filter","_","setTimeout","loop_before_slow_down_","document","querySelector","offsetLeft","clientWidth","requestAnimationFrame","loopFunc","souceNode","targetNode","souceRect","getBoundingClientRect","targetRect","left","right","isOverlap","current","newShiftX","overflow_x","opacity","ref","ReloadOutlined","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a86b2180.chunk.js","sourcesContent":["export const prefix = \"the-lucky-one-\";\n","import \"./index.scss\";\nimport classnames from \"classnames\";\n\nfunction Box(props) {\n  const { className, text, ...others } = props;\n  return (\n    <div className={classnames(className, \"btf-box-container\")} {...others}>\n      {text}\n    </div>\n  );\n}\n\nexport default Box;\n","import \"./index.scss\";\nimport { prefix } from \"../../common/consts\";\nimport Box from \"../../components/Box\";\nimport classnames from \"classnames\";\nimport { useState, useLayoutEffect, useRef, useMemo, useEffect } from \"react\";\nimport { SettingOutlined, ReloadOutlined } from \"@ant-design/icons\";\nimport { Switch, Input, InputNumber, Button, message } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport useSound from \"use-sound\";\nimport throttle from \"lodash/throttle\";\n\nimport flipSfx from \"../../assets/flip.wav\";\n\nlet draw_list = [];\n\n// Check if souceNode is overlaping on targetNode\nconst isOverlap = (souceNode, targetNode) => {\n  const souceRect = souceNode?.getBoundingClientRect();\n  const targetRect = targetNode?.getBoundingClientRect();\n  if (!souceRect || !targetRect) {\n    return;\n  }\n  return souceRect.left < targetRect.left && souceRect.right > targetRect.right;\n};\n\nlet iniSpeed = 48;\nconst boxs_count = 10;\nlet resistance = 0.08;\nlet init_loop_count = 25;\nlet loop_before_slow_down = 35;\n// When speed < low_resistance_speed, update the resistance to low_resistance\nlet low_resistance_speed = 1.5;\nlet low_resistance = 0.007;\n\nlet timer;\nlet shift_x = [];\nlet randomBoxs = [];\nlet box_width, initial_x;\nlet loop_count = init_loop_count;\nlet speed = iniSpeed;\n\nlet prevSelectedIndex = boxs_count - 1;\nlet items_temp = {};\n\nconst defaultConfigs = {\n  iniSpeed,\n  resistance,\n  loop_before_slow_down,\n  low_resistance_speed,\n  low_resistance,\n  draw_list,\n};\n\nconst resetData = () => {\n  speed = iniSpeed;\n  loop_count = init_loop_count;\n};\n\nfunction Main() {\n  const [playSound_flip] = useSound(flipSfx, {\n    interrupt: true,\n  });\n  const [isStart, setStart] = useState(false);\n  const [selected, updateSelected] = useState([]);\n  const [shiftX, updateShiftX] = useState(shift_x);\n  const [settingPanel, showSettingPanel] = useState(false);\n  const [debugMode, setDebugMode] = useState(false);\n  const [settingForm, updateSettingForm] = useState();\n  const [itemsPanel, showItemsPanel] = useState(false);\n  const [isEnd, setIsEnd] = useState(false);\n  const [playSound_flip_thrott, set_playSound_flip_thrott] = useState({\n    callback: undefined,\n  });\n\n  const centralLineRef = useRef(null);\n\n  const resetToDefaultConfigs = () => {\n    ({\n      iniSpeed,\n      resistance,\n      loop_before_slow_down,\n      low_resistance_speed,\n      low_resistance,\n    } = defaultConfigs);\n    const configs = { ...defaultConfigs, draw_list: draw_list || [] };\n    updateSettingForm(configs);\n    return configs;\n  };\n\n  useEffect(() => {\n    if (typeof playSound_flip === \"function\") {\n      set_playSound_flip_thrott({ callback: throttle(playSound_flip, 60) });\n    }\n  }, [playSound_flip]);\n\n  useEffect(() => {\n    // Read saved user configs\n    try {\n      let configs = localStorage.getItem(\"the_lucky_one_configs\");\n      if (!configs) {\n        resetToDefaultConfigs();\n        return;\n      }\n      configs = JSON.parse(configs);\n      ({\n        iniSpeed = iniSpeed,\n        resistance = resistance,\n        loop_before_slow_down = loop_before_slow_down,\n        low_resistance_speed = low_resistance_speed,\n        low_resistance = low_resistance,\n        draw_list = draw_list,\n      } = configs);\n      updateSettingForm(configs);\n      randomBoxs = generateBoxs(boxs_count);\n    } catch (err) {\n      console.log(\"Read save user configs error: \", err);\n    }\n  }, []);\n\n  const onStart = () => {\n    if (!isStart) {\n      if (!randomBoxs?.filter((_) => _)?.length) {\n        message.info(\"Please add some items first\");\n        message.info(\"Click on the config icon on the top right to add items\");\n        return;\n      }\n      resetData();\n      setStart(true);\n      setTimeout(() => {\n        // Randomize the end position\n        const loop_before_slow_down_ =\n          loop_before_slow_down + Math.floor(Math.random() * 100);\n\n        initial_x = randomBoxs.map(\n          (_, index) =>\n            document.querySelector(`#${prefix}box-${index}`)?.offsetLeft\n        );\n        box_width = document.querySelector(`#${prefix}box-0`).clientWidth;\n        ////////////////////////////////////////////////////////////////\n        const loopFunc = () => {\n          updateSelected(\n            randomBoxs.map((_, index) => {\n              return isOverlap(\n                document.querySelector(`#${prefix}box-${index}`),\n                centralLineRef.current\n              );\n            })\n          );\n          const newShiftX = randomBoxs.map((_, index) => {\n            const overflow_x =\n              initial_x[index] + box_width + (shift_x[index] || 0);\n            const new_shift_x =\n              overflow_x > 0\n                ? (shift_x[index] ?? 0) - speed\n                : initial_x[boxs_count - 1] -\n                  initial_x[index] +\n                  overflow_x -\n                  speed;\n            return new_shift_x;\n          });\n          shift_x = newShiftX;\n          updateShiftX(newShiftX);\n\n          // Alter speed\n          loop_count++;\n          if (loop_count >= loop_before_slow_down_) {\n            if (speed < low_resistance_speed) {\n              speed -= low_resistance;\n            } else {\n              speed -= resistance;\n            }\n          }\n\n          if (speed <= 0) {\n            speed = 0;\n            // clearInterval(timer);\n            setIsEnd(true);\n            return;\n          }\n\n          requestAnimationFrame(loopFunc);\n        };\n\n        requestAnimationFrame(loopFunc);\n\n        ////////////////////////////////////////////////////////////////\n      }, 500);\n    }\n  };\n\n  useLayoutEffect(() => {\n    randomBoxs = generateBoxs(boxs_count);\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n\n  // Generate random boxs with random contents draw from list\n  const generateBoxs = (count) => {\n    const draw_list_length = draw_list.length;\n    const shift_x = Array(count).fill(0);\n    return shift_x.map(() => {\n      const randIndex = Math.floor(Math.random() * draw_list_length);\n      return draw_list[randIndex];\n    });\n  };\n\n  const saveConfigs = (configs) => {\n    // Save user configs to localstorage\n    console.log(settingForm);\n    localStorage.setItem(\n      \"the_lucky_one_configs\",\n      JSON.stringify(configs ? configs : settingForm)\n    );\n    closePanel();\n    message.success(\"Saved\");\n    randomBoxs = generateBoxs(boxs_count);\n  };\n\n  const renderBoxs = useMemo(() => {\n    return randomBoxs.map((item, index) => {\n      const isSelected = selected[index] && !selected[index - 1];\n      if (isSelected) {\n        if (\n          index - prevSelectedIndex === 1 ||\n          index - prevSelectedIndex === -(boxs_count - 1)\n        ) {\n          if (typeof playSound_flip_thrott?.callback === \"function\") {\n            playSound_flip_thrott.callback();\n          }\n        }\n        prevSelectedIndex = index;\n      }\n      return (\n        <Box\n          key={`${prefix}box-${index}`}\n          id={`${prefix}box-${index}`}\n          style={{\n            transform: `translateX(${shiftX[index] || 0}px) ${\n              isSelected ? (isEnd ? \"scale(1.5)\" : \"scale(1.1)\") : \"\"\n            }`,\n          }}\n          className={classnames(\n            `${prefix}box`,\n            isSelected && `${prefix}box-selected`,\n            isSelected && isEnd && `${prefix}box-winnner`\n          )}\n          text={item}\n        />\n      );\n    });\n  }, [randomBoxs, shiftX, isEnd, playSound_flip_thrott]);\n\n  const renderInputForm = useMemo(() => {\n    if (!settingForm) return;\n    return (\n      <>\n        <div>\n          iniSpeed:\n          <InputNumber\n            size=\"small\"\n            defaultValue={settingForm.iniSpeed}\n            onChange={(value) => {\n              updateSettingForm({\n                ...settingForm,\n                iniSpeed: value,\n              });\n              iniSpeed = value;\n            }}\n          />\n        </div>\n        <div>\n          resistance:\n          <InputNumber\n            size=\"small\"\n            step=\"0.01\"\n            defaultValue={settingForm.resistance}\n            onChange={(value) => {\n              updateSettingForm({\n                ...settingForm,\n                resistance: value,\n              });\n              resistance = value;\n            }}\n          />\n        </div>\n        <div>\n          loop_before_slow_down:\n          <InputNumber\n            size=\"small\"\n            defaultValue={settingForm.loop_before_slow_down}\n            onChange={(value) => {\n              updateSettingForm({\n                ...settingForm,\n                loop_before_slow_down: value,\n              });\n              loop_before_slow_down = value;\n            }}\n          />\n        </div>\n        <div>\n          low_resistance_speed:\n          <InputNumber\n            size=\"small\"\n            defaultValue={settingForm.low_resistance_speed}\n            onChange={(value) => {\n              updateSettingForm({\n                ...settingForm,\n                low_resistance_speed: value,\n              });\n              low_resistance_speed = value;\n            }}\n          />\n        </div>\n        <div>\n          low_resistance:\n          <InputNumber\n            size=\"small\"\n            defaultValue={settingForm.low_resistance}\n            onChange={(value) => {\n              updateSettingForm({\n                ...settingForm,\n                low_resistance: value,\n              });\n              low_resistance = value;\n            }}\n          />\n        </div>\n        <div>\n          Debug mode:\n          <Switch onChange={(checked) => setDebugMode(checked)} />\n        </div>\n      </>\n    );\n  }, [settingForm]);\n\n  const renderItemsPanel = useMemo(() => {\n    if (!settingForm) {\n      return;\n    }\n    return (\n      <>\n        <div>\n          <div>\n            <InputNumber\n              size=\"small\"\n              placeholder={0}\n              onChange={(value) => {\n                items_temp[\"start_number\"] = value;\n              }}\n            />\n            -{\" \"}\n            <InputNumber\n              size=\"small\"\n              placeholder={0}\n              onChange={(value) => {\n                items_temp[\"end_number\"] = value;\n              }}\n            />\n          </div>\n          <Button\n            type=\"primary\"\n            onClick={() => {\n              for (\n                let i = items_temp[\"start_number\"] ?? 0;\n                i <= items_temp[\"end_number\"] ?? 0;\n                i++\n              ) {\n                draw_list.push(i);\n              }\n              updateSettingForm({\n                ...settingForm,\n                draw_list: draw_list,\n              });\n            }}\n          >\n            Add\n          </Button>\n        </div>\n        <div>\n          <Input\n            size=\"small\"\n            placeholder={\"Enter an item\"}\n            onChange={(e) => {\n              const { value } = e.target;\n              if (!value) return;\n              items_temp[\"draw_list\"] = value;\n            }}\n          />\n          <Button\n            type=\"primary\"\n            onClick={() => {\n              draw_list.push(items_temp[\"draw_list\"]);\n              updateSettingForm({\n                ...settingForm,\n                draw_list: draw_list,\n              });\n            }}\n          >\n            Add\n          </Button>\n        </div>\n        <ul>\n          {draw_list.map((item, index) => {\n            return (\n              <span key={`draw-list-item${index}`}>\n                {item}\n                <Button\n                  type=\"link\"\n                  onClick={() => {\n                    draw_list = [\n                      ...draw_list.slice(0, index),\n                      ...draw_list.slice(index + 1),\n                    ];\n                    updateSettingForm({\n                      ...settingForm,\n                      draw_list: draw_list,\n                    });\n                  }}\n                >\n                  Remove\n                </Button>\n              </span>\n            );\n          })}\n        </ul>\n      </>\n    );\n  }, [settingForm]);\n\n  const closePanel = () => {\n    showSettingPanel(false);\n    showItemsPanel(false);\n  };\n\n  return (\n    <div className={`${prefix}container`}>\n      <div className={debugMode ? `${prefix}debug-panel` : undefined}>\n        <span>loop_count: {loop_count}</span>\n        <span>speed: {speed}</span>\n        <span>iniSpeed: {iniSpeed}</span>\n        <span>resistance: {resistance}</span>\n        <span>loop_before_slow_down: {loop_before_slow_down}</span>\n        <span>low_resistance_speed: {low_resistance_speed}</span>\n        <span>low_resistance: {low_resistance}</span>\n      </div>\n      <SettingOutlined\n        className={`${prefix}setting-icon`}\n        onClick={() => showSettingPanel(true)}\n      />\n      <div\n        className={classnames(\n          `${prefix}setting-panel`,\n          !settingPanel && `${prefix}setting-panel-hide`,\n          itemsPanel && `${prefix}items-panel`\n        )}\n      >\n        {settingPanel && (itemsPanel ? renderItemsPanel : renderInputForm)}\n        <Button\n          type=\"primary\"\n          shape=\"round\"\n          size=\"middle\"\n          onClick={() => showItemsPanel(!itemsPanel)}\n        >\n          {!itemsPanel ? \"Config Items\" : \"Config properties\"}\n        </Button>\n        <Button\n          type=\"primary\"\n          shape=\"round\"\n          size=\"middle\"\n          onClick={() => {\n            const defaultConfigs = resetToDefaultConfigs();\n            saveConfigs(defaultConfigs);\n            message.info(\"Configs have been reset to default\");\n            showSettingPanel(false);\n          }}\n        >\n          Reset User Configs\n        </Button>\n        <Button\n          type=\"primary\"\n          shape=\"round\"\n          size=\"middle\"\n          onClick={settingPanel ? () => saveConfigs() : undefined}\n        >\n          Save\n        </Button>\n        <Button\n          type=\"secondary\"\n          shape=\"round\"\n          size=\"middle\"\n          onClick={closePanel}\n        >\n          close\n        </Button>\n      </div>\n      <div\n        className={classnames(\n          `${prefix}drawer-wrapper`,\n          !isStart && `${prefix}start-button`\n        )}\n        onClick={onStart}\n        style={{ opacity: !settingPanel ? \"1\" : \"0\" }}\n      >\n        <div\n          ref={centralLineRef}\n          className={`${prefix}central-line`}\n          style={{ opacity: isStart && !isEnd ? \"1\" : \"0\" }}\n        ></div>\n        <ReloadOutlined\n          className={`${prefix}reset-button`}\n          style={{ opacity: isEnd ? \"1\" : \"0\" }}\n          onClick={() => {\n            setStart(false);\n            setIsEnd(false);\n            resetData();\n          }}\n        >\n          Reset\n        </ReloadOutlined>\n        {isStart ? renderBoxs : \"Start\"}\n      </div>\n      <span\n        className={classnames(`${prefix}icon`, isStart && `${prefix}icon-hide`)}\n      >\n        ∞\n      </span>\n    </div>\n  );\n}\n\nexport default Main;\n","export default __webpack_public_path__ + \"static/media/flip.6200d697.wav\";","import \"./App.css\";\nimport Main from \"./pages/Main/index.jsx\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}