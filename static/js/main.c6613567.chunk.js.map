{"version":3,"sources":["common/consts.jsx","components/Box/index.jsx","pages/Main/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["prefix","Box","timer","box_width","initial_x","props","className","text","others","classnames","draw_list","iniSpeed","resistance","loop_before_slow_down","low_resistance_speed","low_resistance","shift_x","randomBoxs","loop_count","speed","items_temp","resetData","Main","useState","isStart","setStart","selected","updateSelected","shiftX","updateShiftX","settingPanel","showSettingPanel","debugMode","setDebugMode","settingForm","updateSettingForm","itemsPanel","showItemsPanel","isEnd","setIsEnd","centralLineRef","useRef","useEffect","configs","localStorage","getItem","JSON","parse","generateBoxs","err","console","log","useLayoutEffect","clearInterval","count","draw_list_length","length","Array","fill","map","randIndex","Math","floor","random","renderBoxs","useMemo","item","index","isSelected","id","style","transform","renderInputForm","size","defaultValue","onChange","value","step","checked","renderItemsPanel","placeholder","type","onClick","i","push","e","target","slice","closePanel","undefined","SettingOutlined","shape","setItem","stringify","message","success","filter","_","info","setTimeout","document","querySelector","offsetLeft","clientWidth","setInterval","souceNode","targetNode","souceRect","getBoundingClientRect","targetRect","left","right","isOverlap","current","newShiftX","overflow_x","boxs_count","opacity","ref","ReloadOutlined","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c6613567.chunk.js","sourcesContent":["export const prefix = \"the-lucky-one-\";\n","import \"./index.scss\";\nimport classnames from \"classnames\";\n\nfunction Box(props) {\n  const { className, text, ...others } = props;\n  return (\n    <div className={classnames(className, \"btf-box-container\")} {...others}>\n      {text}\n    </div>\n  );\n}\n\nexport default Box;\n","import \"./index.scss\";\nimport { prefix } from \"../../common/consts\";\nimport Box from \"../../components/Box\";\nimport classnames from \"classnames\";\nimport { useState, useLayoutEffect, useRef, useMemo, useEffect } from \"react\";\nimport { SettingOutlined, ReloadOutlined } from \"@ant-design/icons\";\nimport { Switch, Input, InputNumber, Button, message } from \"antd\";\nimport \"antd/dist/antd.css\";\n\nlet draw_list = [];\n\n// Check if souceNode is overlaping on targetNode\nconst isOverlap = (souceNode, targetNode) => {\n  const souceRect = souceNode?.getBoundingClientRect();\n  const targetRect = targetNode?.getBoundingClientRect();\n  if (!souceRect || !targetRect) {\n    return;\n  }\n  return souceRect.left < targetRect.left && souceRect.right > targetRect.right;\n};\n\nlet iniSpeed = 10;\nconst boxs_count = 10;\nlet resistance = 0.01;\nlet init_loop_count = 0;\nlet loop_before_slow_down = 600;\n// When speed < low_resistance_speed, update the resistance to low_resistance\nlet low_resistance_speed = 1;\nlet low_resistance = 0.002;\n\nlet timer;\nlet shift_x = [];\nlet randomBoxs = [];\nlet box_width, initial_x;\nlet loop_count = init_loop_count;\nlet speed = iniSpeed;\n\nlet items_temp = {};\n\nconst resetData = () => {\n  speed = iniSpeed;\n  loop_count = init_loop_count;\n};\n\nfunction Main() {\n  const [isStart, setStart] = useState(false);\n  const [selected, updateSelected] = useState([]);\n  const [shiftX, updateShiftX] = useState(shift_x);\n  const [settingPanel, showSettingPanel] = useState(false);\n  const [debugMode, setDebugMode] = useState(false);\n  const [settingForm, updateSettingForm] = useState();\n  const [itemsPanel, showItemsPanel] = useState(false);\n  const [isEnd, setIsEnd] = useState(false);\n\n  const centralLineRef = useRef(null);\n\n  useEffect(() => {\n    // Read saved user configs\n    try {\n      let configs = localStorage.getItem(\"the_lucky_one_configs\");\n      if (!configs) {\n        updateSettingForm({\n          iniSpeed,\n          resistance,\n          low_resistance,\n          low_resistance_speed,\n          loop_before_slow_down,\n          draw_list,\n        });\n        return;\n      }\n      configs = JSON.parse(configs);\n      ({\n        iniSpeed = iniSpeed,\n        resistance = resistance,\n        loop_before_slow_down = loop_before_slow_down,\n        low_resistance_speed = low_resistance_speed,\n        low_resistance = low_resistance,\n        draw_list = draw_list,\n      } = configs);\n      updateSettingForm(configs);\n      randomBoxs = generateBoxs(boxs_count);\n    } catch (err) {\n      console.log(\"Read save user configs error: \", err);\n    }\n  }, []);\n\n  const onStart = () => {\n    if (!isStart) {\n      if (!randomBoxs?.filter((_) => _)?.length) {\n        message.info(\"Please add some items first\");\n        message.info(\"Click on the config icon on the top right to add items\");\n        return;\n      }\n      resetData();\n      setStart(true);\n      setTimeout(() => {\n        // Randomize the end position\n        loop_before_slow_down =\n          loop_before_slow_down + Math.floor(Math.random() * 100);\n\n        initial_x = randomBoxs.map(\n          (_, index) =>\n            document.querySelector(`#${prefix}box-${index}`)?.offsetLeft\n        );\n        box_width = document.querySelector(`#${prefix}box-0`).clientWidth;\n        ////////////////////////////////////////////////////////////////\n        timer = setInterval(() => {\n          updateSelected(\n            randomBoxs.map((_, index) => {\n              return isOverlap(\n                document.querySelector(`#${prefix}box-${index}`),\n                centralLineRef.current\n              );\n            })\n          );\n          const newShiftX = randomBoxs.map((_, index) => {\n            const overflow_x =\n              initial_x[index] + box_width + (shift_x[index] || 0);\n            const new_shift_x =\n              overflow_x > 0\n                ? (shift_x[index] ?? 0) - speed\n                : initial_x[boxs_count - 1] -\n                  initial_x[index] +\n                  overflow_x -\n                  speed;\n            return new_shift_x;\n          });\n          shift_x = newShiftX;\n          updateShiftX(newShiftX);\n\n          // Alter speed\n          loop_count++;\n          if (loop_count < loop_before_slow_down) {\n            return;\n          }\n          if (speed < low_resistance_speed) {\n            speed -= low_resistance;\n          } else {\n            speed -= resistance;\n          }\n          if (speed <= 0) {\n            clearInterval(timer);\n            setIsEnd(true);\n          }\n        }, 5);\n\n        ////////////////////////////////////////////////////////////////\n      }, 500);\n    }\n  };\n\n  useLayoutEffect(() => {\n    randomBoxs = generateBoxs(boxs_count);\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n\n  // Generate random boxs with random contents draw from list\n  const generateBoxs = (count) => {\n    const draw_list_length = draw_list.length;\n    const shift_x = Array(count).fill(0);\n    return shift_x.map(() => {\n      const randIndex = Math.floor(Math.random() * draw_list_length);\n      return draw_list[randIndex];\n    });\n  };\n\n  const saveConfigs = () => {\n    // Save user configs to localstorage\n    localStorage.setItem(\"the_lucky_one_configs\", JSON.stringify(settingForm));\n    closePanel();\n    message.success(\"Saved\");\n    randomBoxs = generateBoxs(boxs_count);\n  };\n\n  const renderBoxs = useMemo(() => {\n    return randomBoxs.map((item, index) => {\n      const isSelected = selected[index] && !selected[index - 1];\n      return (\n        <Box\n          key={`${prefix}box-${index}`}\n          id={`${prefix}box-${index}`}\n          style={{\n            transform: `translateX(${shiftX[index] || 0}px) ${\n              isSelected ? (isEnd ? \"scale(1.5)\" : \"scale(1.1)\") : \"\"\n            }`,\n          }}\n          className={classnames(\n            `${prefix}box`,\n            isSelected && `${prefix}box-selected`,\n            isSelected && isEnd && `${prefix}box-winnner`\n          )}\n          text={item}\n        />\n      );\n    });\n  }, [randomBoxs, shiftX, isEnd]);\n\n  const renderInputForm = useMemo(() => {\n    if (!settingForm) return;\n    return (\n      <>\n        <div>\n          iniSpeed:\n          <InputNumber\n            size=\"small\"\n            defaultValue={settingForm.iniSpeed}\n            onChange={(value) => {\n              updateSettingForm({\n                ...settingForm,\n                iniSpeed: value,\n              });\n              iniSpeed = value;\n            }}\n          />\n        </div>\n        <div>\n          resistance:\n          <InputNumber\n            size=\"small\"\n            step=\"0.01\"\n            defaultValue={settingForm.resistance}\n            onChange={(value) => {\n              updateSettingForm({\n                ...settingForm,\n                resistance: value,\n              });\n              resistance = value;\n            }}\n          />\n        </div>\n        <div>\n          loop_before_slow_down:\n          <InputNumber\n            size=\"small\"\n            defaultValue={settingForm.loop_before_slow_down}\n            onChange={(value) => {\n              updateSettingForm({\n                ...settingForm,\n                loop_before_slow_down: value,\n              });\n              loop_before_slow_down = value;\n            }}\n          />\n        </div>\n        <div>\n          low_resistance_speed:\n          <InputNumber\n            size=\"small\"\n            defaultValue={settingForm.low_resistance_speed}\n            onChange={(value) => {\n              updateSettingForm({\n                ...settingForm,\n                low_resistance_speed: value,\n              });\n              low_resistance_speed = value;\n            }}\n          />\n        </div>\n        <div>\n          low_resistance:\n          <InputNumber\n            size=\"small\"\n            defaultValue={settingForm.low_resistance}\n            onChange={(value) => {\n              updateSettingForm({\n                ...settingForm,\n                low_resistance: value,\n              });\n              low_resistance = value;\n            }}\n          />\n        </div>\n        <div>\n          Debug mode:\n          <Switch onChange={(checked) => setDebugMode(checked)} />\n        </div>\n      </>\n    );\n  }, [settingForm]);\n\n  const renderItemsPanel = useMemo(() => {\n    if (!settingForm) {\n      return;\n    }\n    return (\n      <>\n        <div>\n          <div>\n            <InputNumber\n              size=\"small\"\n              placeholder={0}\n              onChange={(value) => {\n                items_temp[\"start_number\"] = value;\n              }}\n            />\n            -{\" \"}\n            <InputNumber\n              size=\"small\"\n              placeholder={0}\n              onChange={(value) => {\n                items_temp[\"end_number\"] = value;\n              }}\n            />\n          </div>\n          <Button\n            type=\"primary\"\n            onClick={() => {\n              for (\n                let i = items_temp[\"start_number\"] ?? 0;\n                i <= items_temp[\"end_number\"] ?? 0;\n                i++\n              ) {\n                draw_list.push(i);\n              }\n              updateSettingForm({\n                ...settingForm,\n                draw_list: draw_list,\n              });\n            }}\n          >\n            Add\n          </Button>\n        </div>\n        <div>\n          <Input\n            size=\"small\"\n            placeholder={\"Enter an item\"}\n            onChange={(e) => {\n              const { value } = e.target;\n              if (!value) return;\n              items_temp[\"draw_list\"] = value;\n            }}\n          />\n          <Button\n            type=\"primary\"\n            onClick={() => {\n              draw_list.push(items_temp[\"draw_list\"]);\n              updateSettingForm({\n                ...settingForm,\n                draw_list: draw_list,\n              });\n            }}\n          >\n            Add\n          </Button>\n        </div>\n        <ul>\n          {draw_list.map((item, index) => {\n            return (\n              <span key={`draw-list-item${index}`}>\n                {item}\n                <Button\n                  type=\"link\"\n                  onClick={() => {\n                    draw_list = [\n                      ...draw_list.slice(0, index),\n                      ...draw_list.slice(index + 1),\n                    ];\n                    updateSettingForm({\n                      ...settingForm,\n                      draw_list: draw_list,\n                    });\n                  }}\n                >\n                  Remove\n                </Button>\n              </span>\n            );\n          })}\n        </ul>\n      </>\n    );\n  }, [settingForm]);\n\n  const closePanel = () => {\n    showSettingPanel(false);\n    showItemsPanel(false);\n  };\n\n  return (\n    <div className={`${prefix}container`}>\n      <div className={debugMode ? `${prefix}debug-panel` : undefined}>\n        <span>loop_count: {loop_count}</span>\n        <span>speed: {speed}</span>\n        <span>iniSpeed: {iniSpeed}</span>\n        <span>resistance: {resistance}</span>\n        <span>loop_before_slow_down: {loop_before_slow_down}</span>\n        <span>low_resistance_speed: {low_resistance_speed}</span>\n        <span>low_resistance: {low_resistance}</span>\n      </div>\n      <SettingOutlined\n        className={`${prefix}setting-icon`}\n        onClick={() => showSettingPanel(true)}\n      />\n      <div\n        className={classnames(\n          `${prefix}setting-panel`,\n          !settingPanel && `${prefix}setting-panel-hide`,\n          itemsPanel && `${prefix}items-panel`\n        )}\n      >\n        {itemsPanel ? renderItemsPanel : renderInputForm}\n        <Button\n          type=\"primary\"\n          shape=\"round\"\n          size=\"middle\"\n          onClick={() => showItemsPanel(!itemsPanel)}\n        >\n          {!itemsPanel ? \"Config Items\" : \"Config properties\"}\n        </Button>\n        <Button\n          type=\"primary\"\n          shape=\"round\"\n          size=\"middle\"\n          onClick={itemsPanel ? saveConfigs : undefined}\n        >\n          Save\n        </Button>\n        <Button\n          type=\"secondary\"\n          shape=\"round\"\n          size=\"middle\"\n          onClick={closePanel}\n        >\n          close\n        </Button>\n      </div>\n      <div\n        className={classnames(\n          `${prefix}drawer-wrapper`,\n          !isStart && `${prefix}start-button`\n        )}\n        onClick={onStart}\n        style={{ opacity: !settingPanel ? \"1\" : \"0\" }}\n      >\n        <div\n          ref={centralLineRef}\n          className={`${prefix}central-line`}\n          style={{ opacity: isStart ? \"1\" : \"0\" }}\n        ></div>\n        <ReloadOutlined\n          className={`${prefix}reset-button`}\n          style={{ opacity: isEnd ? \"1\" : \"0\" }}\n          onClick={() => {\n            setStart(false);\n            setIsEnd(false);\n            resetData();\n          }}\n        >\n          Reset\n        </ReloadOutlined>\n        {isStart ? renderBoxs : \"Start\"}\n      </div>\n      <span\n        className={classnames(`${prefix}icon`, isStart && `${prefix}icon-hide`)}\n      >\n        ∞\n      </span>\n    </div>\n  );\n}\n\nexport default Main;\n","import \"./App.css\";\nimport Main from \"./pages/Main/index.jsx\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}